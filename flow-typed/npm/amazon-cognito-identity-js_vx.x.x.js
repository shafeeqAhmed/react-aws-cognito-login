/**
 * Flowtype definitions for Cognito
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'amazon-cognito-identity-js' {
    declare export type NodeCallback<E, T>= (err?: E, result?: T) => void;
    declare export interface IAuthenticationDetailsData {
        Username: string,
        Password: string
    }
    declare export class AuthenticationDetails {
        constructor(data: IAuthenticationDetailsData): this;
        getUsername(): string;
        getPassword(): string;
        getValidationData(): any[]
    }
    declare export class CognitoStorage {
        setItem(key: string, value: string): void,
        getItem(key: string): string,
        removeItem(key: string): void,
        clear(): void
    }
    declare export interface ICognitoUserData {
        Username: string,
        Pool: CognitoUserPool,
        Storage?: CognitoStorage
    }
    declare export class CognitoUser {
        constructor(data: ICognitoUserData): this;
        setSignInUserSession(signInUserSession: CognitoUserSession): void;
        getSignInUserSession(): CognitoUserSession | null;
        getUsername(): string;
        getAuthenticationFlowType(): string;
        setAuthenticationFlowType(authenticationFlowType: string): string;
        getSession(callback: Function): any;
        refreshSession(refreshToken: CognitoRefreshToken, callback: NodeCallback<any, any>): void;
        authenticateUser(
            authenticationDetails: AuthenticationDetails,
            callbacks: {
                onSuccess: (session: CognitoUserSession, userConfirmationNecessary?: boolean) => void,
                onFailure: (err: any) => void,
                newPasswordRequired?: (userAttributes: any, requiredAttributes: any) => void,
                mfaRequired?: (challengeName: any, challengeParameters: any) => void,
                totpRequired?: (challengeName: any, challengeParameters: any) => void,
                customChallenge?: (challengeParameters: any) => void,
                mfaSetup?: (challengeName: any, challengeParameters: any) => void,
                selectMFAType?: (challengeName: any, challengeParameters: any) => void
            }): void;
        confirmRegistration(
            code: string,
            forceAliasCreation: boolean,
            callback: NodeCallback<any, any>): void;
        sendCustomChallengeAnswer(answerChallenge: any, callback: NodeCallback<any, any>): void;
        resendConfirmationCode(callback: NodeCallback<Error, 'SUCCESS'>): void;
        changePassword(
            oldPassword: string,
            newPassword: string,
            callback: NodeCallback<Error, 'SUCCESS'>): void;
        forgotPassword(
            callbacks: {
                onSuccess: (data: any) => void,
                onFailure: (err: Error) => void,
                inputVerificationCode?: (data: any) => void
            }): void;
        confirmPassword(
            verificationCode: string,
            newPassword: string,
            callbacks: {
                onSuccess: () => void,
                onFailure: (err: Error) => void
            }): void;
        setDeviceStatusRemembered(
            callbacks: {
                onSuccess: (success: string) => void,
                onFailure: (err: any) => void
            }): void;
        setDeviceStatusNotRemembered(
            callbacks: {
                onSuccess: (success: string) => void,
                onFailure: (err: any) => void
            }): void;
        getDevice(
            callbacks: {
                onSuccess: (success: string) => void,
                onFailure: (err: Error) => void
            }): any;
        forgetDevice(
            callbacks: {
                onSuccess: (success: string) => void,
                onFailure: (err: Error) => void
            }): void;
        forgetSpecificDevice(
            deviceKey: string,
            callbacks: {
                onSuccess: (success: string) => void,
                onFailure: (err: Error) => void
            }): void;
        sendMFACode(
            confirmationCode: string,
            callbacks: {
                onSuccess: (session: CognitoUserSession) => void,
                onFailure: (err: any) => void
            },
            mfaType?: string): void;
        listDevices(
            limit: number,
            paginationToken: string,
            callbacks: {
                onSuccess: (data: any) => void,
                onFailure: (err: Error) => void
            }): void;
        completeNewPasswordChallenge(
            newPassword: string,
            requiredAttributeData: any,
            callbacks: {
                onSuccess: (session: CognitoUserSession) => void,
                onFailure: (err: any) => void,
                mfaRequired?: (challengeName: any, challengeParameters: any) => void,
                customChallenge?: (challengeParameters: any) => void
            }): void;
        signOut(): void;
        globalSignOut(
            callbacks: {
                onSuccess: (msg: string) => void,
                onFailure: (err: Error) => void
            }): void;
        verifyAttribute(
            attributeName: string,
            confirmationCode: string,
            callbacks: {
                onSuccess: (success: string) => void,
                onFailure: (err: Error) => void
            }): void;
        getUserAttributes(callback: NodeCallback<Error, CognitoUserAttribute[]>): void;
        updateAttributes(
            attributes: ICognitoUserAttributeData[],
            callback: NodeCallback<Error, string>): void;
        deleteAttributes(attributeList: string[], callback: NodeCallback<Error, string>): void;
        getAttributeVerificationCode(
            name: string,
            callback: {
                onSuccess: () => void,
                onFailure: (err: Error) => void,
                inputVerificationCode: (data: string) => void | null
            }): void;
        deleteUser(callback: NodeCallback<Error, string>): void;
        enableMFA(callback: NodeCallback<Error, string>): void;
        disableMFA(callback: NodeCallback<Error, string>): void;
        getMFAOptions(callback: NodeCallback<Error, MFAOption[]>): void;
        getUserData(callback: NodeCallback<Error, UserData>): void;
        associateSoftwareToken(
            callbacks: {
                associateSecretCode: (secretCode: string) => void,
                onFailure: (err: any) => void
            }): void;
        verifySoftwareToken(
            totpCode: string,
            friendlyDeviceName: string,
            callbacks: {
                onSuccess: (session: CognitoUserSession) => void,
                onFailure: (err: Error) => void
            }): void
    }
    declare export interface MFAOption {
        DeliveryMedium: 'SMS' | 'EMAIL',
        AttributeName: string
    }
    declare export interface UserData {
        MFAOptions: MFAOption[],
        PreferredMfaSetting: string,
        UserAttributes: ICognitoUserAttributeData[],
        UserMFASettingList: string[],
        Username: string
    }
    declare export interface ICognitoUserAttributeData {
        Name: string,
        Value: string
    }
    declare export class CognitoUserAttribute {
        constructor(data: ICognitoUserAttributeData): this;
        getValue(): string;
        setValue(value: string): CognitoUserAttribute;
        getName(): string;
        setName(name: string): CognitoUserAttribute;
        toString(): string;
        toJSON(): Object
    }
    declare export interface ISignUpResult {
        user: CognitoUser,
        userConfirmed: boolean,
        userSub: string
    }
    declare export interface ICognitoUserPoolData {
        UserPoolId: string,
        ClientId: string,
        endpoint?: string,
        Storage?: CognitoStorage
    }
    declare export class CognitoUserPool {
        constructor(data: ICognitoUserPoolData): this;
        getUserPoolId(): string;
        getClientId(): string;
        signUp(
            username: string,
            password: string,
            userAttributes: CognitoUserAttribute[],
            validationData: CognitoUserAttribute[],
            callback: NodeCallback<Error, ISignUpResult>): void;
        getCurrentUser(): CognitoUser | null
    }
    declare export interface ICognitoUserSessionData {
        IdToken: CognitoIdToken,
        AccessToken: CognitoAccessToken,
        RefreshToken?: CognitoRefreshToken
    }
    declare export class CognitoUserSession {
        constructor(data: ICognitoUserSessionData): this;
        getIdToken(): CognitoIdToken;
        getRefreshToken(): CognitoRefreshToken;
        getAccessToken(): CognitoAccessToken;
        isValid(): boolean
    }
    declare export class CognitoAccessToken {
        constructor(data: { AccessToken: string }): this;
        getJwtToken(): string;
        getExpiration(): number;
        getIssuedAt(): number;
        decodePayload(): {
            [id: string]: any
        }
    }
    declare export class CognitoIdToken {
        constructor(data: { IdToken: string }): this;
        getJwtToken(): string;
        getExpiration(): number;
        getIssuedAt(): number;
        decodePayload(): {
            [id: string]: any
        }
    }
    declare export class CognitoRefreshToken {
        constructor(data: { RefreshToken: string }): this;
        getToken(): string
    }
    declare export interface ICookieStorageData {
        domain: string,
        path?: string,
        expires?: number,
        secure?: boolean
    }
    declare export class CookieStorage mixins CognitoStorage {
        constructor(data: ICookieStorageData): this;
        setItem(key: string, value: string): void;
        getItem(key: string): string;
        removeItem(key: string): void;
        clear(): void
    }
}